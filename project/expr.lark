?start: expr

expr: let_expr
    | if_expr
    | simple_expr

let_expr: "let" ID "=" expr "in" expr "end" -> let
    | "letfun" ID "(" ID ")" "=" expr "in" expr "end" -> letfun

if_expr: "if" expr "then" expr "else" expr -> if_then_else

?simple_expr: or_expr

?or_expr: or_expr "||" and_expr -> or
    | and_expr

?and_expr: and_expr "&&" comp_expr -> and
    | comp_expr

?comp_expr: add_expr "==" add_expr -> eq
    | add_expr "<" add_expr -> lt
    | add_expr

?add_expr: add_expr "+" mul_expr -> add
    | add_expr "-" mul_expr -> sub 
    | mul_expr

?mul_expr: mul_expr "*" img_expr -> mul
    | mul_expr "/" img_expr -> div
    | img_expr

?img_expr: img_expr "++" unary_expr -> stitch_horizontal
    | unary_expr

?unary_expr: "-" unary_expr -> neg
    | "@" unary_expr -> rotate90
    | app_expr

?app_expr: app_expr "(" expr ")" -> app
    | primary_expr

?primary_expr: "(" expr ")"
    | ID -> var
    | INT -> int_lit
    | BOOL -> bool_lit
    | STRING -> image_lit

BOOL.2: "true" | "false"
%import common.ESCAPED_STRING -> STRING
%import common.INT
%import common.CNAME -> ID
%import common.WS
%ignore WS